### 遗传算法优化微分方程组-2
2023-7-28
- 修正种群初始化，确保所有种群符合要求，特别是微分方程周期要求
- 修正子代选择策略，不满足周期解的子代都需要去掉

2023-8-24
- 修正适应度函数 cost 成 cost2
- 修正 fitness_ode 成 fitness_ode2
#%%
import numpy as np
import random
import math
import copy
import matplotlib.pyplot as plt
from scipy.integrate import odeint


from utils_function import df_ode
from utils_function import cost
from utils_function import cost2
from utils_function import print_cost
from utils_function import print_cost2
from utils_function import find_peaks_index
#%%
# 参数字典
# 优化含 17 个方程的微分方程组, 优化 89 个参数

# 超参数名称
opt_name = ['v0Per', 'v0Cry', 'v0Chrono', 'v0Rev1', 'v0Rev2', 'v0Ror', 'v0B', 
            'v0Jf',  'vsPer', 'vsCry', 'vsChrono', 'vs1Rev1', 'vsRev2', 'vsRor', 
            'vs2Rev1', 'vsB', 'naB', 'naJF', 'naRo', 'niPC', 'niCh', 'niRe', 
            'KAPer', 'KACry', 'KAChrono', 'KARev2', 'KARor', 'KAB', 'KA1Rev1', 
            'KA2Rev1', 'R1Per', 'R1Cry', 'R1Chrono', 'R1Rev1', 'R1Rev2', 'R1Ror', 
            'R2Per', 'R2Cry', 'R2Chrono', 'R2Rev1', 'R2Rev2',  'R2Ror', 'RB1', 
            'RB2', 'vdPer', 'vdCry', 'vdChrono', 'vdRev1', 'vdRev2', 'vdRor', 
            'vdB', 'vdJf', 'KdPer', 'KdCry', 'KdChrono', 'KdRev1', 'KdRev2',
            'KdRor', 'KdB', 'KdJf', 'kdn', 'ksPER', 'ksCRY', 'ksCHRONO', 
            'ksBMAL1', 'ksJF', 'ksREV1', 'ksREV2', 'ksROR', 'kaPC', 'kdPC',
            'vdPER', 'vdCRY', 'vdCHRONO', 'vdBMAL1', 'vdJF', 'vdREV1', 
            'vdREV2', 'vdROR', 'KdPER', 'KdCRY', 'KdCHRONO', 'KdBMAL1', 'KdJF',
            'KdREV1', 'KdREV2', 'KdROR', 'vdPC', 'KdPC']

# key: 参数名称
# value: [参数求值范围 list， 精度/小数点位数，初值]
opt_dict = {'v0Per': [[0.01,0.2], 4, 0.0296], 'v0Cry': [[0.1, 1.0], 4, 0.4215],
            'v0Chrono': [[0.1, 1.0], 4, 0.2278], 'v0Rev1': [[0.05, 0.8], 4, 0.1595],
            'v0Rev2': [[0.01, 0.2], 4, 0.0228], 'v0Ror': [[0.1, 1.0], 4, 0.4534], 
            'v0B': [[0.1, 1.0], 4, 0.4557], 'v0Jf': [[0.2, 0.8], 4, 0.2278], 'vsPer': [[0.8, 1.9], 4, 1.3033],
            'vsCry': [[0.2, 1.2], 4, 0.5924], 'vsChrono': [[0.1, 0.9], 4, 0.2278], 'vs1Rev1': [[0.6, 1.6], 4, 1.0265],
            'vsRev2': [[0.1, 0.95], 4, 0.2392], 'vsRor': [[0.25, 1.2], 4, 0.6197], 'vs2Rev1': [[0.1, 0.95], 4, 0.229],
            'vsB': [[0.25, 1.5], 4, 0.7063], 'naB': [[2.5, 3.5], 4, 3.0], 'naJF': [[1.5, 2.5], 4, 2.0],
            'naRo': [[1.5, 2.5], 4, 2.05], 'niPC': [[3.5, 4.5], 4, 4.0], 'niCh': [[4.0, 5.0], 4, 4.5], 
            'niRe': [[3.5, 4.5], 4, 4.0], 'KAPer': [[0.55, 1.75], 4, 1.15], 'KACry': [[0.2, 1.45], 4, 0.791],
            'KAChrono': [[1.0, 2.0], 4, 1.5], 'KARev2': [[0.1, 0.9], 4, 0.375], 'KARor': [[2.0, 3.0], 4, 2.483],
            'KAB': [[1.3, 2.4], 4, 1.868], 'KA1Rev1': [[4.0, 5.2], 4, 4.775], 'KA2Rev1': [[4.0, 5.2], 4, 4.775],
            'R1Per': [[0.3, 1.5], 4, 0.96], 'R1Cry': [[0.2, 1.2], 4, 0.675], 'R1Chrono': [[0.25, 1.45], 4, 0.975],
            'R1Rev1': [[1.0, 1.9], 4, 1.506], 'R1Rev2': [[0.1, 1.2], 4, 0.6], 'R1Ror': [[0.3, 1.5], 4, 0.97],
            'R2Per': [[9.0, 15.0], 4, 9.76], 'R2Cry': [[9.0, 15.0], 4, 9.675], 'R2Chrono': [[0.3, 1.5], 4, 0.975],
            'R2Rev1': [[0.1, 0.8], 4, 0.218], 'R2Rev2': [[8.0, 15.0], 4, 9.0], 'R2Ror': [[0.01, 0.2], 4, 0.012],
            'RB1': [[0.01, 0.2], 4, 0.032], 'RB2': [[2.4, 3.5], 4, 3.0], 'vdPer': [[0.1, 0.8], 4, 0.3441],
            'vdCry': [[0.1, 1.1], 4, 0.5525], 'vdChrono': [[0.1, 0.9], 4, 0.4386], 'vdRev1': [[0.1, 0.9], 4, 0.4113],
            'vdRev2': [[0.1, 0.9], 4, 0.4113], 'vdRor': [[0.1, 0.9], 4, 0.352], 'vdB': [[0.1, 1.2], 4, 0.5696], 
            'vdJf': [[0.2, 1.8], 4, 0.9114], 'KdPer': [[0.01, 0.2], 4, 0.047], 'KdCry': [[0.1, 0.9], 4, 0.371],
            'KdChrono': [[0.1, 1.0], 4, 0.5], 'KdRev1': [[0.2, 1.2], 4, 0.691], 'KdRev2': [[0.2, 1.2], 4, 0.691],
            'KdRor': [[3.0, 4.2], 4, 3.659], 'KdB': [[0.05, 0.8], 4, 0.135], 'KdJf': [[0.05, 0.7], 4, 0.2], 
            'kdn': [[0.01, 0.3], 4, 0.0877], 'ksPER': [[0.6, 1.8], 4, 1.1495], 'ksCRY': [[1.0, 1.9], 4, 1.489],
            'ksCHRONO': [[0.01, 0.3], 4, 0.0911], 'ksBMAL1': [[0.8, 1.8], 4, 1.2224], 'ksJF': [[0.2, 1.2], 4, 0.6835],
            'ksREV1': [[0.05, 0.6], 4, 0.1903], 'ksREV2': [[0.05, 0.6], 4, 0.1903], 'ksROR': [[0.1, 0.9], 4, 0.3646],
            'kaPC': [[0.001, 0.02], 4, 0.0068], 'kdPC': [[0.001, 0.02], 4, 0.0068], 'vdPER': [[1.0, 2.0], 4, 1.4639],
            'vdCRY': [[0.1, 0.85], 4, 0.3019], 'vdCHRONO': [[0.01, 0.2], 4, 0.057], 'vdBMAL1': [[0.01, 0.8], 4, 0.1185],
            'vdJF': [[0.1, 0.9], 4, 0.4557], 'vdREV1': [[0.1, 0.9], 4, 0.4409], 'vdREV2': [[0.1, 0.9], 4, 0.4409],
            'vdROR': [[0.05, 0.8], 4, 0.2039], 'KdPER': [[0.1, 0.8], 4, 0.478], 'KdCRY': [[0.7, 1.8], 4, 1.247],
            'KdCHRONO': [[0.3, 1.6], 4, 0.8], 'KdBMAL1': [[0.05, 0.7], 4, 0.135], 'KdJF': [[0.1, 0.9], 4, 0.3],
            'KdREV1': [[0.3, 1.4], 4, 0.796], 'KdREV2': [[0.3, 1.4], 4, 0.796], 'KdROR': [[4.25, 5.45], 4, 4.893],
            'vdPC': [[0.01, 0.2], 4, 0.0786], 'KdPC': [[0.1, 1.0], 4, 0.575]}

# ode 初值
# MPer, MCry, MChrono, MRev2, MRor, MRev1, MB, MJF, PER, CRY, PC,
# CHRONO, BMAL1, JF, REV1, REV2, ROR
ode_init = [2.0172, 1.8925, 0.6735, 0.4824, 3.2744, 0.613, 0.7139, 0.0645,
            1.6355, 18.5506, 2.9056, 0.3492, 7.7913, 0.03, 0.1733, 0.1338, 11.9576]
# 微分方程组求解区间
ode_t = np.arange(0, 180, 0.01)

# 种群的个体数量 size = 50，
# 共 89 条染色体，每条染色体实数值范围 ,精度, chrom_precision = [] (小数点位数)
# chrom_intervals  每条染色体取值范围
# 交叉概率为 cp = 0.8，变异概率为 mp = 0.1,进化最大世代数为 iter_max = 150
# 初始种群值 init_value，如果给定初值，则通过变异操作生成剩余的种群初值，此时，可以给定初始变异概率 mp_init
#
param_dict = {'size': 50,
              'chrom_precision': list(),
              'chrom_intervals': list(),
              'chrom_name': list(),
              'cp': 0.8,
              'mp': 0.4,
              'iter_max': 100,
              'init_value': list(),
              'mp_init': 0.5,
              'ode_init': ode_init,
              'ode_t': ode_t}

# 设置 chrom_precision, chrom_intrvals, init_value
for key in opt_name:
    value = opt_dict.get(key)
    param_dict['chrom_intervals'].append(value[0])
    param_dict['chrom_precision'].append(value[1])
    param_dict['init_value'].append(value[2])
    param_dict['chrom_name'].append(key)
#%%
# 遗传算法相关函数
# 计算每条染色体长度
def chrom_length(interval, precision):
    return math.ceil(np.log2((interval[1] - interval[0]) * (10 ** precision)))


# 染色体单点变异操作
def mutate_base(chrom, mutation_probability, chromosome_size):
    p = random.random()
    if p < mutation_probability:
        t = random.randint(1, chromosome_size)
        mask1 = 1 << (t - 1)
        mask2 = chrom & mask1
        if mask2 > 0:
            chrom = chrom & (~mask2)  # ~ 按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0变为1
        else:
            chrom = chrom ^ mask1   # ^ 按位异或运算符：当两对应的二进位相异时，结果为1
    return chrom


def generate_individual(init_value, chrom_size, mp):
    # 在 init_value 基础上进行随机变异操作，生成初始个体
    # init_value  指定初值（list, 含所有染色体）
    # chrom_size  染色体长度
    # mp   变异概率

    generate_pop = list()
    for i in range(len(init_value)):
        # 对每一条染色体执行变异操作（变异次数与变异位点均随机生成）
        v = 2 ** chrom_size[i] - 1
        mutate_number = random.randint(0, v)  # 变异次数
        mutate_number = min(20, mutate_number)
        temp_pop = mutate_base(chrom=init_value[i],
                               mutation_probability=mp,
                               chromosome_size=chrom_size[i])
        for j in range(1, mutate_number):
            temp_pop = mutate_base(chrom=temp_pop,
                                   mutation_probability=mp,
                                   chromosome_size=chrom_size[i])
        generate_pop.append(temp_pop)

    return generate_pop


# 生成满足周期性要求的个体/染色体
def generate_individual_period(init_value, chrom_size, mp,
                               param_name, ode_init, ode_t, func_decode_pop):
    # 在 init_value 基础上进行随机变异操作，生成初始个体
    # init_value  指定初值（list, 含所有染色体）
    # chrom_size  染色体长度
    # mp   变异概率
    # func_decode_pop  解码粒子函数

    generate_pop = None
    flag_loop = False
    while not flag_loop:
        generate_pop = generate_individual(init_value, chrom_size, mp)
        # print('generate_pop')
        # print(generate_pop)
        params = fitness_params_transform(param_name=param_name,
                                          individual=func_decode_pop(generate_pop))
        # print('params')
        # print(params)
        flag_loop = ode_is_period(param_name, ode_init, ode_t, **params)
        # print('flag_loop : {}'.format(flag_loop))
    return generate_pop


# 染色体编码
def encode_chrom(interval, value, chromosome_size):
    # 将区间 interval 之内的数值 value 映射为一条染色体 chromosome
    d = interval[1] - interval[0]
    n = float(2 ** chromosome_size - 1)
    return int((value - interval[0]) * n / d)


# 染色体解码
def decode_chrom(interval, chromosome, chromosome_size):
    # 将一个染色体 chromosome 映射为区间 interval 之内的数值
    d = interval[1] - interval[0]
    n = float(2 ** chromosome_size - 1)
    return (interval[0] + chromosome * d / n)


# 染色体交叉
def cross_chrom(chrom1, chrom2, chrom_size, crossover_probability):
    p = random.random()   # 随机概率
    n = 2 ** chrom_size - 1
    if (chrom1 != chrom2) and (p < crossover_probability):
        t = random.randint(1, chrom_size - 1)   # 随机选择一点（单点交叉）
        mask = n << t    # << 左移运算符
        (r1, r2) = (chrom1 & mask, chrom2 & mask)  # & 按位与运算符：参与运算的两个值,如果两个相应位都为1,则该位的结果为1,否则为0
        mask = n >> (chrom_size - t)
        (l1, l2) = (chrom1 & mask, chrom2 & mask)
        (chrom1, chrom2) = (r1 + l2, r2 + l1)
    return (chrom1, chrom2)

# 17 个微分方程组构建的适应度函数
# 注：Python 3.7 及以上版本中，Dict 是按照插入顺序存储的，为了灵活性，还是将变量顺序保存至 param_name 列表中
def fitness_ode(param_name, ode_init, ode_t, **param_opt):
    # param_name: 待优化变量（超参数）名称列表
    # param_opt: 待优化变量（超参数）
    # ode_init: 微分方程组初值
    # ode_t: 微分方程组求解区间


    # 微分方程组超参数
    args = list()
    for key in param_name:
        args.append(param_opt.get(key))

    # points is the initial point; args is the set for super parameters
    P = odeint(df_ode, ode_init, ode_t, args=(args,))

    # 成本计算
    Per = P[:, 8]
    Cry = P[:, 9]
    BMAL1 = P[:, 12]
    REV1 = P[:, 14]
    REV2 = P[:, 15]

    # 只分析 100-end 时间内
    index = ode_t >= 100.0
    time_t = ode_t[index]
    Per, Cry, BMAL1, REV1, REV2 = Per[index], Cry[index], BMAL1[index], REV1[index], REV2[index]
    value = cost(time_t=time_t, Per=Per, Cry=Cry, BMAL1=BMAL1, REV1=REV1, REV2=REV2)

    # 注，实际上需要取 cost 的最小值，而遗传算法适应度值比较中，采用适应度值越大，个体越优，
    # 因此，此处返回 np.exp(-value)
    return np.exp(-value)

# 2023-8-24
# 17 个微分方程组构建的适应度函数
# 注：Python 3.7 及以上版本中，Dict 是按照插入顺序存储的，为了灵活性，还是将变量顺序保存至 param_name 列表中
def fitness_ode2(param_name, ode_init, ode_t, **param_opt):
    # param_name: 待优化变量（超参数）名称列表
    # param_opt: 待优化变量（超参数）
    # ode_init: 微分方程组初值
    # ode_t: 微分方程组求解区间


    # 微分方程组超参数
    args = list()
    for key in param_name:
        args.append(param_opt.get(key))

    # points is the initial point; args is the set for super parameters
    P = odeint(df_ode, ode_init, ode_t, args=(args,))

    # 成本计算
    MPer = P[:, 0]  # Per mRNA
    MCry = P[:, 1]  # Cry mRNA
    MRev1 = P[:, 5]   # Rev-erb1 mRNA
    MB = P[:, 6]  # Bmall mRNA
    Per = P[:, 8]  # PER
    Cry = P[:, 9]  # CRY
    BMAL1 = P[:, 12]  # BMAL1
    REV1 = P[:, 14]  # REV-ERB1
    REV2 = P[:, 15]  # 

    # 只分析 100-end 时间内
    index = ode_t >= 100.0
    time_t = ode_t[index]
    MPer, MCry, MRev1, MB = MPer[index], MCry[index], MRev1[index], MB[index]
    Per, Cry, BMAL1, REV1, REV2 = Per[index], Cry[index], BMAL1[index], REV1[index], REV2[index]
    value = cost2(time_t=time_t, Per=Per, Cry=Cry, BMAL1=BMAL1,
                  REV1=REV1, REV2=REV2, MPer=MPer, MCry=MCry,
                  MRev1=MRev1, MB=MB)

    # 注，实际上需要取 cost 的最小值，而遗传算法适应度值比较中，采用适应度值越大，个体越优，
    # 因此，此处返回 np.exp(-value)
    return np.exp(-value)


# 17 个微分方程组构建的适应度函数
# 注：Python 3.7 及以上版本中，Dict 是按照插入顺序存储的，为了灵活性，还是将变量顺序保存至 param_name 列表中
# 打印一些局部变量值
def fitness_ode_print_cost(param_name, ode_init, ode_t, **param_opt):
    # param_name: 待优化变量（超参数）名称列表
    # param_opt: 待优化变量（超参数）
    # ode_init: 微分方程组初值
    # ode_t: 微分方程组求解区间


    # 微分方程组超参数
    args = list()
    for key in param_name:
        args.append(param_opt.get(key))

    # points is the initial point; args is the set for super parameters
    P = odeint(df_ode, ode_init, ode_t, args=(args,))

    # # 成本计算
    # Per = P[:, 8]
    # Cry = P[:, 9]
    # BMAL1 = P[:, 12]
    # REV1 = P[:, 14]
    # REV2 = P[:, 15]
    
    # 成本计算
    MPer = P[:, 0]  # Per mRNA
    MCry = P[:, 1]  # Cry mRNA
    MRev1 = P[:, 5]   # Rev-erb1 mRNA
    MB = P[:, 6]  # Bmall mRNA
    Per = P[:, 8]  # PER
    Cry = P[:, 9]  # CRY
    BMAL1 = P[:, 12]  # BMAL1
    REV1 = P[:, 14]  # REV-ERB1
    REV2 = P[:, 15]  # 

    # 只分析 100-end 时间内
    index = ode_t >= 100.0
    time_t = ode_t[index]
    MPer, MCry, MRev1, MB = MPer[index], MCry[index], MRev1[index], MB[index]
    Per, Cry, BMAL1, REV1, REV2 = Per[index], Cry[index], BMAL1[index], REV1[index], REV2[index]
    # print_cost(time_t=time_t, Per=Per, Cry=Cry, BMAL1=BMAL1, REV1=REV1, REV2=REV2)
    print_cost2(time_t=time_t, Per=Per, Cry=Cry, BMAL1=BMAL1, REV1=REV1, REV2=REV2,
                MPer=MPer, MCry=MCry, MRev1=MRev1, MB=MB)

    


# 给定超参数绘图
# 17 个微分方程组构建的适应度函数
# 注：Python 3.7 及以上版本中，Dict 是按照插入顺序存储的，为了灵活性，还是将变量顺序保存至 param_name 列表中
def plot_ode(param_name, ode_init, ode_t, **param_opt):
    # param_name: 待优化变量（超参数）名称列表
    # param_opt: 待优化变量（超参数）

    # 微分方程组超参数
    args = list()
    for key in param_name:
        args.append(param_opt.get(key))

    # points is the initial point; args is the set for super parameters
    P = odeint(df_ode, ode_init, ode_t, args=(args,))

    # 成本计算
    Per = P[:, 8]
    Cry = P[:, 9]
    BMAL1 = P[:, 12]
    REV1 = P[:, 14]
    REV2 = P[:, 15]

    fig = plt.figure()
    plt.plot(ode_t, Per)
    plt.plot(ode_t, Cry)
    plt.plot(ode_t, BMAL1)
    plt.plot(ode_t, REV1)
    plt.plot(ode_t, REV2)
    plt.legend(['Per', 'Cry', 'BAML1', 'REV1', 'REV2'])
    
    fig = plt.figure()
    plt.plot(ode_t, BMAL1)
    plt.plot(ode_t, REV1)
    plt.plot(ode_t, REV2)
    plt.legend(['BAML1', 'REV1', 'REV2'])
    
    index = ode_t > 100.0
    t = ode_t[index]
    Per = Per[index]
    Cry = Cry[index]
    BMAL1 = BMAL1[index]
    REV1 = REV1[index]
    REV2 = REV2[index]
    
    fig = plt.figure()
    plt.plot(t, Per)
    plt.plot(t, Cry)
    plt.plot(t, BMAL1)
    plt.plot(t, REV1)
    plt.plot(t, REV2)
    plt.legend(['Per', 'Cry', 'BAML1', 'REV1', 'REV2'])
    
    fig = plt.figure()
    plt.plot(t, BMAL1)
    plt.plot(t, REV1)
    plt.plot(t, REV2)
    plt.legend(['BAML1', 'REV1', 'REV2'])
    
    plt.show()


# 把解码后的 individual 转换成实际适应度函数 fitness 参数的字典形式
def fitness_params_transform(param_name, individual):
    # 超参数列表
    # individual 是一个列表

    param_dict = {}
    for key, value in zip(param_name, individual):
        param_dict[key] = value
    return param_dict


# 判断 ODE 中 Per, Cry, BMAL1, REV1 4 个变量是否具有周期性
# 以 100-end 时间内是否具有多于 2 个峰值点为依据
def ode_is_period_base(param_name, ode_init, ode_t, **param_opt):
    # param_name: 待优化变量（超参数）名称列表
    # param_opt: 待优化变量（超参数）
    
    # print('ode_is_period 被调用..')

    # 微分方程组超参数
    args = list()
    for key in param_name:
        args.append(param_opt.get(key))

    # points is the initial point; args is the set for super parameters
    # print(args)
    P = odeint(df_ode, ode_init, ode_t, args=(args,))

    # # 成本计算
    # Per = P[:, 8]
    # Cry = P[:, 9]
    # BMAL1 = P[:, 12]
    # REV1 = P[:, 14]
    
    # 成本计算
    MPer = P[:, 0]  # Per mRNA
    MCry = P[:, 1]  # Cry mRNA
    MRev1 = P[:, 5]   # Rev-erb1 mRNA
    MB = P[:, 6]  # Bmall mRNA
    Per = P[:, 8]  # PER
    Cry = P[:, 9]  # CRY
    BMAL1 = P[:, 12]  # BMAL1
    REV1 = P[:, 14]  # REV-ERB1
    REV2 = P[:, 15]  # 

    # 只分析 100-end 时间内
    index = ode_t >= 100.0
    MPer, MCry, MRev1, MB = MPer[index], MCry[index], MRev1[index], MB[index]
    Per, Cry, BMAL1, REV1 = Per[index], Cry[index], BMAL1[index], REV1[index]

    # # 峰值索引
    # Per_peaks_index = find_peaks_index(Per)
    # Cry_peaks_index = find_peaks_index(Cry)
    # BMAL1_peaks_index = find_peaks_index(BMAL1)
    # REV1_peaks_index = find_peaks_index(REV1)
    
    # 峰值索引
    MPer_peaks_index = find_peaks_index(MPer)
    MCry_peaks_index = find_peaks_index(MCry)
    MRev1_peaks_index = find_peaks_index(MRev1)
    MB_peaks_index = find_peaks_index(MB)
    Per_peaks_index = find_peaks_index(Per)
    Cry_peaks_index = find_peaks_index(Cry)
    BMAL1_peaks_index = find_peaks_index(BMAL1)
    REV1_peaks_index = find_peaks_index(REV1)

    # 峰值点个数 > 2, 认为具有周期性
    if ((Per_peaks_index is not None) & (Cry_peaks_index is not None) 
        & (BMAL1_peaks_index is not None) & (REV1_peaks_index is not None)
        & (MPer_peaks_index is not None) & (MCry_peaks_index is not None)
        & (MRev1_peaks_index is not None) & (MB_peaks_index is not None)):
        return True
    else:
        return False
    
    
# 判断 ODE 周期性
# 1、ODE 是否具备周期性
# 2、ODE 中部分超参数置 0， 仍具备周期性
# 以 100-end 时间内是否具有多于 2 个峰值点为依据
def ode_is_period(param_name, ode_init, ode_t, **param_opt):
    # param_name: 待优化变量（超参数）名称列表
    # param_opt: 待优化变量（超参数）
    
    flag_bool1 = ode_is_period_base(param_name, ode_init, ode_t, **param_opt)
    # 部分超参数置 0
    set_zero_list = ['v0Chrono', 'v0Jf', 'vsChrono', 'vdChrono', 'vdJf']
    temp_param_opt = copy.deepcopy(param_opt)
    for key in set_zero_list:
        temp_param_opt[key] = 0.0
    
    flag_bool2 = ode_is_period_base(param_name, ode_init, ode_t, **temp_param_opt)
    
    return flag_bool1 & flag_bool2




# 遗传算法类
class Population:
    # 种群的设计
    def __init__(self, param_dict, fitness_func):
        # 种群信息合
        self.individuals = list()          # 个体集合
        self.fitness = list()              # 个体适应度集
        self.selector_probability = list()  # 个体选择概率集合
        self.new_individuals = list()      # 新一代个体集合
        self.fitness_func = fitness_func   # 适应度函数

        # 最佳个体的信息
        self.elitist = {'individual': list(), 'fitness': None, 'iteration': 0}

        self.size = param_dict.get('size')  # 种群所包含的个体数
        self.crossover_probability = param_dict.get('cp')   # 个体之间的交叉概率
        self.mutation_probability = param_dict.get('mp')    # 个体之间的变异概率
        self.init_mutation_probability = param_dict.get('mp_init')  # 初始化个体时的变异概率
        self.iteration_max = param_dict.get('iter_max')  # 种群进化的最大世代数
        self.iteration = 1                  # 种群当前所处世代

        self.chrom_intervals = param_dict.get('chrom_intervals')  # 每条染色体取值范围
        self.chrom_precision = param_dict.get('chrom_precision')  # 每条染色体精度（小数点位数）
        self.chrom_name = param_dict.get('chrom_name')  # 每条染色体名称（对应变量名称）
        self.pop_init_value = param_dict.get('init_value')  # 给定粒子初值

        # 非遗传算法本身参数
        # ode 初值
        self.ode_init = param_dict.get('ode_init')
        # ode 求解区间
        self.ode_t = param_dict.get('ode_t')

        # 计算每个染色体的长度
        self.chromosome_size = list()  # 个体的染色体长度
        for i in range(0, len(self.chrom_intervals)):
            # 计算每条染色体长度
            self.chromosome_size.append(chrom_length(self.chrom_intervals[i],
                                                     self.chrom_precision[i]))

        # 初始化种群与新一代个体
        # 选择概率等集合以 0 值进行初始化
        # 计算初代粒子适应度
        init_value = self.pop_init_value
        encode_init_value = self.encode_pop(value=init_value)
        for i in range(self.size):
            temp_pop = copy.deepcopy(encode_init_value)
            temp_pop = generate_individual_period(init_value=temp_pop,
                                                  chrom_size=self.chromosome_size,
                                                  mp=self.init_mutation_probability,
                                                  param_name=self.chrom_name,
                                                  ode_init=self.ode_init,
                                                  ode_t=self.ode_t,
                                                  func_decode_pop=self.decode_pop)
            self.individuals.append(copy.deepcopy(temp_pop))
            self.new_individuals.append(copy.deepcopy(temp_pop))
            self.fitness.append(self.evaluate_individual(temp_pop))
            self.selector_probability.append(0)
            
        # 更新全局最优个体（初代群体中的最优个体）
        self.reproduct_elitist()

    # 打印最优个体
    def print_elitist(self):
        temp = {'individual': self.decode_pop(individual=self.elitist.get('individual')),
                'fitness': self.elitist.get('fitness'),
                'iteration': self.elitist.get('iteration')}
        print(temp)

    # 个体编码
    def encode_pop(self, value):
        encode_value = list()
        for i, x in enumerate(value):
            encode_value.append(encode_chrom(interval=self.chrom_intervals[i],
                                             value=x,
                                             chromosome_size=self.chromosome_size[i]))
        return encode_value

    # 个体解码
    def decode_pop(self, individual):
        decode_value = list()
        for i, chrom in enumerate(individual):
            decode_value.append(decode_chrom(interval=self.chrom_intervals[i],
                                             chromosome=chrom,
                                             chromosome_size=self.chromosome_size[i]))
        return decode_value

    # 适应度函数，实际的适应度函数以形参形式传入
    # def fitness_func(self, func, **kwargs):
    #     return func(self.chrom_name, **kwargs)

    # 计算单个个体适应度
    def evaluate_individual(self, individual):
        params = fitness_params_transform(param_name=self.chrom_name,
                                          individual=self.decode_pop(individual))

        return self.fitness_func(self.chrom_name, self.ode_init,
                                 self.ode_t, **params)

    # 计算群体适应度
    def evaluate(self):
        # 用于评估种群中的个体集合 self.individuals 中各个个体的适应度
        sp = self.selector_probability
        for i in range(self.size):
            params = fitness_params_transform(param_name=self.chrom_name,
                                              individual=self.decode_pop(self.individuals[i]))
            # 将计算结果保存在 self.fitness 列表中
            self.fitness[i] = self.fitness_func(**params)
        ft_sum = sum(self.fitness)
        for i in range(self.size):
            sp[i] = self.fitness[i] / float(ft_sum)   # 得到各个个体的生存概率
            
    # 计算选择概率
    def evaluate_probability(self):
        sp = self.selector_probability
        ft_sum = sum(self.fitness)
        for i in range(self.size):
            sp[i] = self.fitness[i] / float(ft_sum)

            
    # 轮盘赌博机（选择）,每次选择 2 个个体，返回 self.individuals 中的索引
    def select(self):
        indexs = range(self.size)
        return np.random.choice(indexs, size=2, replace=False, p=self.selector_probability)


    # 2 个个体交叉
    def cross(self, individual1, individual2):
        new_ind1 = list()
        new_ind2 = list()
        for i in range(len(individual1)):
            # 逐条染色体交叉
            (temp1, temp2) = cross_chrom(individual1[i], individual2[i],
                                         chrom_size=self.chromosome_size[i],
                                         crossover_probability=self.crossover_probability)
            new_ind1.append(temp1)
            new_ind2.append(temp2)
        return (new_ind1, new_ind2)


    # 个体变异
    def mutate(self, individual):
        new_individual = list()
        for i in range(len(individual)):
            temp = mutate_base(chrom=individual[i],
                               mutation_probability=self.mutation_probability,
                               chromosome_size=self.chromosome_size[i])
            new_individual.append(temp)
        return new_individual


    # 保留最佳个体（此时计算适应度值越大越好）
    def reproduct_elitist(self):
        # 与当前种群进行适应度比较，更新最佳个体
        best_index = np.argmax(np.array(self.fitness))
        if self.elitist['fitness'] is None:
            self.elitist['fitness'] = self.fitness[best_index]
            self.elitist['individual'] = copy.deepcopy(self.individuals[best_index])
            self.elitist['iteration'] = self.iteration
        elif self.elitist['fitness'] < self.fitness[best_index]:
            self.elitist['fitness'] = self.fitness[best_index]
            self.elitist['individual'] = copy.deepcopy(self.individuals[best_index])
            self.elitist['iteration'] = self.iteration


    # 进化过程（一次迭代操作）
    # 1、父代与子代都进行适应度值计算、比较
    # 2、 交叉、变异分开执行，都产生新的子代
    def evolve(self):
        # 计算选择概率
        self.evaluate_probability()
        # 新产生子代/群体
        new_pops = list()
        # 进化操作-交叉
        i = 0
        while True:
            # 选择两个个体，进行交叉与变异，产生新的种群
            (indv1, indv2) = self.select()
            # 交叉
            (new_individual1, new_individual2) = self.cross(individual1=self.individuals[indv1],
                                                            individual2=self.individuals[indv2])
            new_pops.append(copy.deepcopy(new_individual1))
            new_pops.append(copy.deepcopy(new_individual2))
            # 控制循环条件
            i = i + 2
            if i > self.size:
                break

        # 进化操作-变异
        for ite in self.individuals:
            new_individual = self.mutate(individual=ite)
            new_pops.append(copy.deepcopy(new_individual))

        # 计算子代适应度值
        new_pops_fitness = list()
        for ite in new_pops:
            # 如果 Per, Cry, BMAL1 是周期解，才计算适应度值，否则，直接赋值一个很小的数，或 -Inf
            params = fitness_params_transform(param_name=self.chrom_name,
                                          individual=self.decode_pop(ite))
            flag_loop = ode_is_period(self.chrom_name, self.ode_init,
                                      self.ode_t, **params)
            if flag_loop:
                pop_fitness = self.evaluate_individual(ite)
                new_pops_fitness.append(pop_fitness)
            else:
                new_pops_fitness.append(0.0)

        # 父代与子代合并成一个群体
        pops = self.individuals + new_pops
        pops_fitness = self.fitness + new_pops_fitness
        # 按照适应度值降序排序
        sort_index = np.argsort(np.array(pops_fitness))[::-1]
        for i in range(self.size):
            index = sort_index[i]
            self.individuals[i] = copy.deepcopy(pops[index])
            self.fitness[i] = pops_fitness[index]
            
        # 更新全局最优个体
        self.reproduct_elitist()
    
    
    def run(self):
        # 根据种群最大进化世代数设定了一个循环。在循环过程中，调用 evolve 函数进行种群进化计算，并输出种群的每一代的个体适应度最大值、平均值和最小值
        for i in range(self.iteration_max):
            self.evolve()
            self.iteration = self.iteration + 1
            print(i+1, max(self.fitness), sum(self.fitness)/self.size,
                  min(self.fitness))
#%%
pop = Population(param_dict=param_dict, fitness_func=fitness_ode2)
pop.run()
#%%
pop.print_elitist()
#%%
params = fitness_params_transform(param_name=pop.chrom_name,
                                  individual=pop.decode_pop(pop.elitist.get('individual')))
plot_ode(param_name=pop.chrom_name,
         ode_init=pop.ode_init,
         ode_t=pop.ode_t, **params)
fitness_ode_print_cost(param_name=pop.chrom_name,
                       ode_init=pop.ode_init,
                       ode_t=pop.ode_t, **params)
#%%
